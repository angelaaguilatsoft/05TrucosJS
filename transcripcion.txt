JavaScript: Trucos

Consigue desarrollar aplicaciones web más efectivas en JavaScript gracias a este curso de consejos y trucos prácticos que amplificarán la productividad de tus desarrollos. Conocerás herramientas útiles para la depuración y la ejecución de pruebas unitarias, buenas prácticas en temas de seguridad, generación de documentación y estilizado de código, entre otros conceptos clave.

Archivos:
https://github.com/LinkedInLearning/javascript-trucos-2809715



0. INTRODUCCIÓN

0.1 Los mejores trucos para JavaScript

JavaScript es un lenguaje que ha estado en constante evolución desde sus inicios y con esto, también la manera en que nosotros producimos aplicaciones web. Si ya sabes las bases de JavaScript y te interesa saber técnicas para mejorar tu código y ser más efectivo en tu día a día, este curso de LinkedIn Learning es para ti. Mi nombre es Natalia Corea, soy desarrolladora Full Stack. Tengo más de diez años de experiencia trabajando en diferentes áreas del desarrollo web y en este curso te daré una serie de consejos para que puedas escribir código a nivel profesional siguiendo las buenas prácticas de seguridad, formato y documentación. También te enseñaré a cómo sacar el mejor provecho de las herramientas disponibles en los navegadores para mejorar tu código JavaScript y probar tus aplicaciones web. Veremos varias librerías que te permitirán expandir las capacidades de JavaScript para que puedas resolver problemas más rápidamente. Empezamos.




1.BUENAS PRÁCTICAS EN JAVASCRIPT

1.1 Buenas prácticas al escribir código JavaScript

Sucede que cuando aprendemos un lenguaje, no nos enfocamos tanto en cómo escribimos el código sino más que el código funcione. Esto puede causar que, a lo largo del tiempo, tomemos malas prácticas de escribir código. Te quiero dar algunos consejos para que puedas escribir buen código en JavaScript. El primer consejo es utilizar nombres significativos para variables, funciones, objetos y demás. Esto es porque tal vez en el momento en que tú nombras algo cuando estás escribiendo código vas a entender de qué se trata, pero si tú miras tu código dos días después, una semana después, es muy probable que hayas perdido el hilo de lo que estabas haciendo y no vas a entender el propósito de por qué declarastes una variable. Por esta razón, es que siempre hay que utilizar nombres que describan el propósito de lo que estás declarando. Por ejemplo, en este caso yo tengo una variable booleana que indica el estado de algo, por esta razón le puse que es activo. También es importante utilizar el formato camel case. Este formato indica que, si el nombre de una variable o una función tiene más de una palabra, la primera palabra debe empezar en minúscula y las siguientes en mayúscula, esto hará que sea más fácil de leer. El siguiente consejo es evitar variables globales. Esto es aplicable cuando trabajamos en un ambiente web. Esto porque las páginas web también cargan anuncios y cargan otras librerías de JavaScript que pueden acceder a tu código y sobrescribir valores. Para proteger las variables, tú puedes tal vez utilizaru un objeto como módulo y así declarar la variable dentro de este objeto. La mejor manera de hacer esto es utilizar una función de invocación inmediata, ya que estas crean su propio contexto de ejecución. Entonces, todo lo que tú declares dentro de una función quedará protegido fuera del objeto Windows, pero siempre manteniendo acceso a todas las funciones y propiedades que el objeto Windows ofrece. Otro consejo es evitar los strings o números mágicos. ¿Qué son los strings o números mágicos? Bueno, estos son parámetros que tú utilizas para definir estados en la aplicación. Por ejemplo, puedes tener strings que indiquen el estado de algo como activo, inactivo, terminado, empezado, cosas por el estilo. Si tú te encuentras que tienes una serie de strings que define cosas en tu aplicación o números, tú debes ponerlo dentro de una constante, como se indica aquí. Esto no solo hará que tu código sea más seguro, ya que tú sabes qué es lo que debes pasar a estas funciones, sino que también va a ser más fácil de leer, y va a ser más fácil de entender el propósito de este string o este número. Otro consejo es siempre tratar de optimizar loops. Este formato que ves aquí de un loop de un array es una mala práctica, ya que yo estoy leyendo el largo de este arreglo cada vez que el loop se ejecuta. Si tenemos un arreglo muy largo, esto causará un problema de desempeño. Lo que debes hacer es siempre declarar una variable con el largo antes del que loop empiece, entonces este cálculo solo se ejecutará una vez. Si trabajas con arreglos, lo mejor que puedes hacer es utilizar la función forEach, ya que esta ha sido definida para mejorar el desempeño de la iteración de arreglos. Otro consejo es siempre utilizar mayúscula en la definición de clase. Este es un estándar que va a través de todos los lenguajes de programación. Entonces esto hace que tu código sea más fácil de leer. Y el último consejo es siempre tratar de utilizar notaciones cortas. Por ejemplo, aquí tú tienes dos maneras de definir objetos. Puedes hacerlo de esta manera directamente o puedes, tal vez, crear un objeto Object, y luego empezar a definir variables. Esta opción no solo es más fácil de entender, sino que también agregará menos líneas de código y hará que tus archivos sean menos largos.


1.2 Conociendo los estilos de código más populares

https://airbnb.io/projects/javascript/

https://github.com/airbnb/javascript/

https://google.github.io/styleguide/jsguide.html

https://standardjs.com/

La comunidad web es muy grande y sucede que cada persona tiene su propia manera de escribir código. Por esta razón es que algunas empresas han creado guías de estilo para nosotros poder escribir JavaScript mejor. Estas guías indican, por ejemplo, cómo nombrar variables, cómo crear los márgenes adicionales cuando declaramos variables dentro de una función, cómo trabajar con ciertas sintaxis, por ejemplo, React o Angular y demás. De las guías más importantes que hay en el momento, podemos mencionar Airbnb, Google y el Standard de JavaScript. Cada una tiene sus propias particularidades, pero también tienen muchas cosas en común. Una que te quiero mostrar es, por ejemplo, la del margen adicional de cuando declaramos variables o funciones dentro de otra función o dentro de otra estructura. Tú puedes ver que, por ejemplo, en la de Airbnb indica que debemos dejar 2 espacios. En Google también dicen que debemos dejar 2 espacios y en la de Standard también dicen que debemos dejar 2 espacios. Tú puedes tal vez pensar que esto es un poco obvio, pero estas guías son especialmente útiles cuando se trabajan en proyectos o en equipos de desarrollo grandes, donde hay muchos desarrolladores. Entonces estas empresas, para poder mantener sus grandes repositorios de código consistentes y fáciles de entender, los desarrolladores deben seguir las guías que las empresas exigen. Es por eso es que nosotros como desarrolladores es importante que entendamos cuáles son estas guías y tratar de aplicarlas lo más posible para así poder acostumbrarnos a ellas.


1.3 Utilizando ESLint para estilizar tu código JavaScript

comando para instalar ESLint en la carpeta del proyecto:
	npm install -g eslint
	sudo npm install -g eslint (para dar permiso a ciertas carpetas del equipo)

Te quiero mostrar cómo puedes utilizar ESLint para estilizar tu aplicación web. ESLint requiere que instales Node.js en tu computadora. En caso que no lo tengas instalado ya, puedes descargarlo desde esta URL que puedes ver en pantalla. Node.js también incluye npm, el cual es un paquete para manejar librerías para JavaScript. Si yas en instalado npm, el siguiente paso sería abrir la terminal en tu computadora y dirigirte al folder de tu proyecto; para esto tienes que utilizar el comando para moverte a otro folder, el cual es cd espacio, y luego puedes arrastrar el folder de tu aplicación a la terminal y apretas Enter. Ya aquí puedes instalar ESLint. El comando para instalar esta herramienta es el que puedes ver en pantalla; esto instalará ESLint a nivel global en tu computadora, apretas Enter y ahora se intentará instalar. En caso que veas errores como estos, esto significa que npm necesita acceso a ciertos recursos de tu computadora; entonces para esto tienes que utilizar el comando sudo, sudo espacio y luego vuelves a poner el comando de npm, apretas Enter, te va a pedir el password de la computadora, lo agregas, apretas Enter y ahora sí, ESLint se puede instalar. El siguiente paso es inicializar npm en tu aplicación, para esto escribirás npm espacio init. Aquí tienes que contestar ciertas preguntas que npm te va a hacer; yo en este caso las dejaré todas por default. Ya aquí se ha inicializado npm en mi aplicación. El siguiente paso es inicializar ESLint en la aplicación; para esto escribo eslint espacio dos guiones eslint. Aquí debes escoger la configuración que quieres para ESLint. Tienes varias opciones, yo voy a escoger la última, la cual es la más estricta y es la que me ayuda a forzar el estilo en mi código. Luego voy a contestar el resto de preguntas, por ejemplo, aquí voy a escoger JavaScript modules, ya que yo no estoy trabajando con webpack ni ninguna otra herramienta para compilar mi aplicación, no estoy utilizando frameworks, no estoy utilizando TypeScript, y el código está corriendo en el browser; aquí tú tienes la opción de escoger el estilo para tu aplicación, yo voy a escoger uno de los que existen actualmente: voy a escoger el de Airbnb, pero tú también tienes disponible el Standar o el de Google. Aquí npm me pregunta si yo quiero instalar todos los paquetes requeridos para correr esta solución, y yo le digo que sí. Ahora npm está instalando toda la librería. El siguiente paso es abrir tu aplicación en Visual Studio Code. Tienes que dirigirte al panel de EXTENSIONS y buscar ESLint. Yo ya lo tengo aquí en mi lista Recomendado, pero tú puedes buscarlo en la barra más arriba y lo instalas. Ahora, a partir de aquí, ya puedes empezar a utilizar ESLint, por ejemplo, vamos a mirar este archivo JavaScript. Aquí puedes ver todos los errores de estilo que yo tengo y ESLint me está indicando qué es lo que sucede con el estilo de mi código; por ejemplo aquí me dice que espera un margen de dos espacios, pero solamente encontró un tab. Con esta extensión yo puedo hacer una corrección rápida de estos estilos. Entonces yo puedo escoger la mejor opción, por ejemplo esta, arreglar este problema de margen y así sucesivamente para cada uno de los errores que tengo en mi código. Esta herramienta es muy útil porque tú puedes ver los errores mientras tú vas escribiendo código y de esta manera garantizas que tu código va a estar limpio y estilizado.


1.4 Buenas prácticas de seguridad en JavaScript

El Cross-site Scripting o XSS es un tipo de ataque donde una persona intenta inyectar un JavaScript en la página, ya sea para meter contenido inapropiado o robar información de la sesión del usuario. Te voy a mostrar unas prácticas que tú puedes seguir para evitar este tipo de ataque. El primer consejo que te voy a dar es de nunca utilizar la función eval en tu código. Esta es una función que toma un JavaScript en forma de string y lo ejecuta. Si tú utilizas esta función en tu aplicación, es como una puerta abierta para que alguien pueda meter código directamente en la página. Otra cosa que debes tomar en cuenta es que todo contenido que no sea parte de tu aplicación se debe considerar inseguro. Este tipo de contenido puede ser un input a través de un formulario, el parámetro de un URL, una librería externa o un recursos externo. Siempre hay que estar vigilantes que un ataque puede venir a través de cualquiera de estas fuentes. Por esta razón, uno siempre debe ser cauteloso a la hora de inyectar elementos al DOM. Aquí te tengo un ejemplo de una mala práctica. En este ejemplo yo estoy tomando el input que viene a través de un área texto en la página y luego, utilizando la propiedad InnerHTML, estoy metiendo el contenido de vuelta a la página. En un escenario como esto, alguien puede escribir un táctil JavaScript que contiene un script malicioso y inyectarlo en la página. Para yo evitar este problema, puedo utilizar la propiedad textContent para mostrarle el contenido al usuario. TextContent mostrará el contenido como texto y no hará render de los tags que se incluyan en el input. La manera más segura de hacer esto es a través de la librería DOMPurify. Esto es una librería que toma un string e ilimina todo el contenido que puede ser un potencial problema a la seguridad. Tú puedes descargar esta librería a través de este URL. Esta librería trabaja con varios formatos de strings, no solo JavaScript, sino también Párrafos, SVG y demás. Entonces básicamente toma cualquier string y lo limpia o lo sanitiza, también esa es otra palabra. Entonces en este caso yo estoy utilizando la librería para limpiar el input que viene a través de comentario y así eliminar cualquier contenido malicioso. Lo mismo puede hacer con parámetros que vengan a través de la URL. Vamos a ver un momento cómo esta librería funciona. Yo puedo tomar este script y correrlo en la página. Puedes ver que este string contiene un iframe, aquí, que se está in intentando inyectar a través de un párrafo. Entonces DOMPurify elimina el contenido malicioso. También podemos probar cómo funciona con SVG. Aquí está intentando correr un script a través de estos tag. Puedes ver ahora que el string está limpio y seguro. Espero que estos consejos te ayuden a crear aplicaciones web más seguras y confiables.

sentencia segura: 
div.textContent = comentario, // es segura, no como innerHTML, ya que no hace render de los TAG que se hacen en el input
URL de la librería DOMPurify: https://github.com/cure53/DOMPurify



div.innerHTML = DOMPurify.sanitize(comentario);

document.getElementById.


2. HERRAMIENTAS DISPONIBLES PARA LOS DESARROLLADORES DE JAVASCRIPT

2.1 Introducción a las herramientas para desarrollador

Una de las herramientas más útiles que tienen los desarrolladores para trabajar en aplicaciones web son las herramientas que los navegadores web incluyen por defecto. Te voy a mostrar cómo puedes acceder a ellas. Aquí en este momento estoy en Chrome. Para poder acceder a las herramientas puedes hacer clic en el botón que tiene los tres puntos, irte al menú Más herramientas y hacer clic en la opción que dice Herramientas para desarrolladores. Al hacer esto, tú encontrarás una serie de tabs donde tú puedes probar diferentes partes de tu aplicación. Por ejemplo, el tab Elements muestra todo el contenido HTML de una página. Tú puedes ver cuál es el CSS relacionado con cada uno de los elementos de la página. El Console es la consola del navegador. Source indica todos los archivos JavaScript que están cargados en esta página. El panel Network muestra todos los requests que esta página hace y todos los archivos que son cargados a través de estos requests. En Performance tú puedes hacer pruebas de rendimiento de tu aplicación. En el panel Memory tú puedes probar cuánta memoria está consumiendo tu aplicación. En el panel Application puedes ver todas las partes de tu aplicación, dependiendo de las tecnologías que estés utilizando. Y así, hay muchas más opciones que tú puedes utilizar en estas herramientas. Firefox también tiene su propio set de herramientas. Para acceder a ellas, puedes hacer clic en el menú Herramientas y seleccionar la opción Desarrollador web. Aquí puedes abrir cada uno de los paneles directamente. Cada navegador tienes su propio set de herramientas. Estos son comunes entre sí, pero también tienen sus diferencias. Yo te aconsejo que las utilices para sacar el mayor provecho y hacer tu día a día más fácil.


2.2 Cómo inspeccionar elementos en tu página

Haremos un recorrido a través del panel de Elementos de las herramientas para desarrollador en Chrome. Este panel se utiliza para inspeccionar los elementos HTML en tu página y también para trabajar en la parte de CSS, a través de este panel que puedes ver aquí. A nivel de JavaScript, este panel tiene una opción donde nosotros podemos ver todos los listeners que esta página tiene. Por ejemplo, yo aquí he agregado un listener al evento load del objeto Window, y se me muestra aquí. Si yo hago clic en este enlace, me llevará al código que se ejecuta relacionado con este listener. También si yo inspecciono un elemento del HTML, me mostrará los listeners asociados con ese elemento. Yo he agregado un listener al evento click de este botón. Si yo expando esta opción, podemos encontrar la referencia al objeto HTML, la función que se llama cuando este evento se dispara y el enlace al código que se ejecuta cuando este evento se dispara.


2.3 Qué es y cómo utilizar la consola del navegador

El panel de Consola es una de las herramientas que más utilizamos cuando intentamos resolver problemas en nuestra aplicación. Te voy a mostrar cómo puedes enviar mensajes personalizados a la consola. Aquí, puedes ver un mensaje estándar en donde yo solamente estoy pasando un string. Nosotros también podemos pasar objetos al console.log, como puedes ver en este escenario: yo estoy pasando un string, que es el que puedes ver aquí, y luego estoy enviando un objeto. Este formato me permite expandir el objeto y ver todas sus propiedades. Lo que sucedería es que el objeto se transformaría en string, y yo no podría ver las propiedades, es por esta razón que este formato es más útil. También yo puedo personalizar los mensajes que envío al console.log. Aquí, por ejemplo, yo he cambiado el formato del mensaje. Esto se hace a través de CSS. Tú puedes definir un string con una serie de atributos de CSS, todos separados con punto y coma, y luego pasarlos como parámetros al console.log. Es importante que tú utilices el símbolo de porcentaje y «c» para indicar que vas a utilizar colores en este mensaje. Igual como en el ejemplo anterior, tú puedes pasar un objeto luego de que has definido los colores. Esto yo lo encontraba muy útil cuando yo quiero hacer console.log de errores en peticiones web. Otra manera de mostrar errores en la consola es utilizando el método console.assert. Este método lo que hace es que dada una condición, si es falsa, mostrará un mensaje en la consola, como puedes ver, y esta se muestra como un error. Otro método útil que te puede ayudar a probar tu aplicación es console.count. Esta función cuenta cuántas veces este método se ha llamado y tú puedes pasar como referencia una etiqueta. Entonces, esta función cantará cuántas veces he llamado a esta etiqueta. Conforme va aumentando, recibimos un mensaje en la consola. Con el método countReset yo puedo reiniciar el contador y empezar nuevamente. Tú puedes utilizar esto para probar cuántas veces una función o un loop se está llamando. Otro método que puedes utilizar es console.error. Esto mostrará un mensaje de error en la consola, con este formato que puedes ver aquí. Otra característica muy curiosa del console es que puedes agrupar mensajes, como puedes ver aquí. Yo aquí he creado dos niveles de agrupaciones de mensajes. Esto se hace a través de los métodos group y groupEnd; group agrupará todos los console.log que siguen después de él y groupEnd terminará el grupo. Y, por último, otro método muy útil es el console.table. Este método me permite mostrar una tabla de datos en la consola, con un formato más fácil de leer, como puedes ver aquí. Tú puedes pasar como parámetro un arreglo o un objeto, y la consola lo tomará y lo mostrará como una tabla de datos.


2.4 Un vistazo al panel de Recursos

Una de las herramientas más útiles disponibles en el navegador es el panel de Recursos. Este panel nos permite ver todos los archivos cargados en una página. En este ejemplo yo he cargado una aplicación, la cual incluye dos archivos JavaScript y un HTML. Haciendo clic en los archivos, yo puedo ver su contenido y también el origen de donde provienen estos archivos. Esto es útil en caso de que tú estés cargando librerías externas. Otra opción útil que incluye este panel son los overrides. A veces sucede que nosotros queremos probar algún código en vivo dentro de este panel. Por ejemplo, yo puedo crear una variable aquí, pero cuando yo refresco la página, estos cambios se pierden. Para esto, yo puedo utilizar los overrides. Para crear un override, primero debes seleccionar una carpeta. Luego, debes darle permiso a Chrome para que pueda escribir en esta carpeta. Hecho esto, todos los cambios que guardes en la página se guardarán dentro del override y cuando refresque la página, aún los podrás ver. Otro panel que te puede ser útil es el Content script. Sucede que cuando instalamos extensiones de Chrome, estas a veces inyectan código dentro de las páginas. Este código puede causar problemas cuando interactúan con alguna aplicación en la que estemos trabajando. Entonces, utilizando este panel, tú puedes ver qué extensiones están inyectando código y así poder inspeccionar y resolver problemas.


2.5 Controlando y depurando la ejecución de tu código JavaScript

Una de las características más importantes que tiene el panel de recursos es la de poder detener la ejecución de nuestro código y ejecutar cada línea paso por paso, esto es muy útil cuando tenemos un error y necesitamos encontrar el origen. Para poder detener el código, tienes que crear un breakpoint; para hacer esto simplemente tienes que hacer clic en el número de la línea de código donde quieres que la ejecución se detenga. Luego tienes que correr el código. Aquí puedes ver que el código se ha detenido en la línea 16. Aquí yo puedo inspeccionar todos los elementos en el código uno por uno si yo paso el mouse por encima y puedes ver cuál es el estatus de cada una de las variables. Por ejemplo, yo puedo ver que este arreglo contiene todo esto en memoria, puedo darme cuenta que, por ejemplo, la función aleatorio aún no ha sido definida. Puedo inspeccionar cada uno de los objetos y las funciones. Otro aspecto útil del panel de recursos es la capacidad de poder agregar vistas de variables dentro del código. Aquí puedes ver que he agregado una vista a la variable aleatorio, esto significa que yo no tengo que pasar el mouse por encima para ver su contenido, yo puedo verlo aquí directamente. También yo puedo ver el scope donde se está ejecutando el código. Aquí puedes ver que dentro de este scope local de esta función existen estos elementos. También puedo ver qué está sucediendo en el scope global, en este caso sería el objeto Window. Para mover la ejecución de este código yo puedo utilizar los controles que están aquí. Este código lo que hace es que salta la ejecución de una función. Sucede que, si estamos en una línea donde una función se está llamando, nosotros podemos entrar a esa función, pero este botón nos permite saltar la ejecución de esa función. Por ejemplo aquí, si yo quisiera entrar a fetch, yo podría usar este botón, pero simplemente la voy a saltar. Yo puedo poner un breakpoint aquí adentro para ver qué sucede cuando he recibido la respuesta de la promesa de fetch. Para poner a correr el código nuevamente puedo utilizar este botón. Aquí puedes ver que he corrido nuevamente el código y el código se ha vuelto a detener. Aquí puedo ver, por ejemplo, el resultado de la función response.blob. Aquí puedo ver el objeto blob y lo que contiene. Luego, para seguirme moviendo a través de las líneas puedo utilizar este botón y puedes ver que ahora yo puedo moverme línea por línea y ver cuáles son las variables que se han declarado anteriormente. Esta función nos saca de la ejecución de la función donde nos encontramos y esta nos mueve un paso más adelante.


2.6 Creando snippets de código en el panel de Recursos

Una herramienta muy útil que incluye el panel de recursos es la capacidad de crear snippets o pequeñas piezas de código que podemos guardar en el navegador. Aquí yo voy a crear un snippet. Para eso, hago clic en este botón y le pongo un nombre, lo voy a llamar «mi_codigo». Hecho esto, puedes ver que se abre una ventana donde yo puedo escribir código JavaScript. Luego, yo puedo guardar este snippet al presionar Ctrl+S, o Comando+S si estás en Mac. Luego, yo puedo ejecotar este código al hacer clic en este botón. Si hago clic aquí, puedes ver qué código se ha ejecutado. Esa opción es muy útil si tú quieres hacer pruebas en el navegador y no quieres crear un archivo HTML desde cero para correr el código. También te sirve como una manera fácil de guardar código que utilizas muy comúnmente.


2.7 Evaluando el desempeño del código JavaScript

Te mostraré dos maneras de cómo tú puedes probar el desempeño de tus aplicaciones JavaScript. En las herramientas para desarrollador de Chrome hay un panel que se llama Performance, que tú puedes utilizar para probar tu página. Este panel no solo prueba el desempeño de JavaScript, sino que prueba toda la página en sí. Esto puede ser muy útil cuando tú estás generando muchos elementos en la página como animaciones y demás, y quieres ver qué partes de tu página están consumiendo más recursos. Este panel tiene varias opciones. Si tú haces clic en el botón de configuración, te abrirá este menú. Las opciones más interesantes son las que puedes ver aquí. Aquí tú puedes seleccionar, por ejemplo, si quieres cambiar la configuración de la conexión a internet y ver cómo tu aplicación responde a este cambio. También puedes cambiar la manera en que el CPU se desempeña. Lo puedes hacer más lento y ver cómo tu aplicación se comporta. Para medir el desempeño, tenemos que grabar un caso de estudio. Para eso hay que hacer clic en este botón. Al hacer clic, el navegador empezará a grabar lo que sucede mientras corremos la prueba. Al detenerse, el navegador generará un reporte. Esto puede tomar algunos segundos. Aquí vemos el reporte de la aplicación. Puedes ver que incluso hemos obtenido capturas de pantalla de cómo la aplicación ha lucido a lo largo de la prueba. Este gráfico aquí que ves muestra cuánto tomó la prueba en tiempo, en milisegundos. Y puedes ver cuál de las secciones de la página es la que más consumió recursos. En este caso, debido a que estamos haciendo animaciones, es el rendering de la página la que tomó más tiempo. Tú puedes ampliar y seleccionar secciones, utilizando la línea de tiempo que ves aquí. Puedes moverte a lo largo de la prueba. Y aquí más abajo puedes ver en más detalle qué fue lo que se llamó en cada segundo de la prueba. Por ejemplo, aquí, vemos que se ejecutó un evento de animación, aquí podemos ver que el navegador recalculó algún estilo dentro del CCS y demás. Aquí también puedes ver otros reportes de esta prueba. Cuando tenemos aplicaciones que tienen muchas animaciones o muchos elementos gráficos, podemos utilizar esta prueba para ver si es el JavaScript el que está causando problemas de desempeño, o si son otros elementos en la página. Te mostraré otra técnica a través de la consola. Para esto voy a cargar un HTML diferente. Este HTML lo que hace es que estoy utilizando la función dentro del console para probar el tiempo de ejecución de una función. Para hacer esta prueba, primero tenemos que llamar console.time. Esto empezará un timer dentro del navegador. Después de esto, ponemos el código que queremos probar. En este caso, sería la función. Cuando la ejecución ha terminado, llamamos console. end time. Cuando se llama esta función, obtenemos el resultado en milisegundos. Tú puedes utilizar esto para ver cuál parte de tu código es la que dura más en ejecutarse y así poder detectar problemas y optimizar tu aplicación.


2.8 Eliminando código innecesario en tu código de JavaScript

Es común que conforme una aplicación crece algunas partes del código se vuelven obsoletas, pero es difícil decidir si podemos borrar una parte del código o no, ya que tenemos el riesgo que esto puede romper alguna parte de la aplicación. Te voy a mostrar una manera en que tú puedes detectar código que no está siendo utilizado y así lo puedes eliminar y limpiar tu aplicación. Si abres las herramientas para el desarrollador en Chrome, encontrarás un panel que se llama Coverage. En caso de que no lo veas, lo puedes encontrar haciendo clic en el menú de los tres puntos y yéndote a la opción Más herramientas, o More tools, y haciendo clic en Coverage. Coverage es un panel que graba una sesión en tu aplicación y luego te indica qué parte de tu código no está siendo utilizado. Yo aquí voy a grabar una pequeña sesión con esta pequeña aplicación que tengo aquí. En este momento, Chrome está siguiendo todos los pasos que esta aplicación sigue a la hora de ejecutarse. Tú puedes ver aquí que la función que escucha por el clic del botón se marca como que no está siendo utilizada. A la hora de yo hacer clic en el botón, puedes ver que ahora se ha marcado como verde. Esto me indica que esta función está en uso. Yo aquí tengo otras dos funciones vacías. Esta función «prueba2» puedes ver que al momento en que yo la invoco se marca como utilizada. Esta función, debido a que yo nunca la invoco, me la marca en rojo, indicándome que no está siendo utilizada; entonces yo la puedo eliminar de mi código. Otra función útil que tiene este panel es el análisis de los archivos JavaScript y CSS. Esta opción que puedes ar ver aquí abajo indica qué porcentaje de este archivo está siendo utilizado. Puedes ver que yo estoy cargando la librería de Bootstrap, pero solamente estoy utilizando una pequeña parte de esta. Yo podría tratar de minimizar la carga de esta librería para hacer mi aplicación más liviana. De mi archivo JavaScript me indica que solamente el 5.2 % está siendo inutilizado. Entonces, esto sería un archivo JavaScript que está casi totalmente optimizado. Igual con mi archivo CSS, me indica que solamente un 3.2 % no está siendo utilizado. Tú puedes bajar un reporte al hacer clic en este botón también. Espero que esta herramienta te ayude a tener aplicaciones más limpias y livianas.


2.9 Pruebas unitarias rápidas con la consola

Te voy a mostrar cómo hacer pruebas unitarias con la consola. Esto te puede ayudar en situaciones donde tú no tienes tiempo para tal vez configurar un framework más avanzado o si estás trabajando en un prototipo rápido de una aplicación. Para hacer las pruebas unitarias, se toma ventaja de la función assert de la consola. Assert toma como parámetro una condición, la cual valida si es verdadera o falsa y si es falsa, muestra un resultado en la consola. En este string nosotros podemos pasar un acierto. Esto es un mensaje que indica si algo funcionó o no correctamente. En este ejemplo yo tengo un objeto con varias propiedades, las cuales cada una tiene un tipo diferente de dato. Luego, utilizando una función, yo tomo uno de estos objetos aleatoriamente y lo devuelvo de esta función. Luego yo quiero comprobar si el objeto que me devuelve esta función es de un tipo específico. En este caso, yo quiero ver si me devuelve un objeto. Entonces, utilizando la función console.assert, simplemente paso la condición utilizando el operador typeof, hago una comparación del objeto que recibí de la función con el string de tipo de objeto. En caso que esto sea falso, voy a recibir un mensaje de error en la consola. Al correr este código, puedes ver que las cinco veces que se ejecutó esta función ninguna me devolvió el objeto. Esta funcionalidad puede ser útil en situaciones donde tú necesitas obtener un tipo de dato específico después de que un proceso haya sucedido, una función o un módulo. Entonces, tú puedes probar esta función o módulo utilizando esta función. Este es otro ejemplo. Un error común que sucede es que de una función esperamos un parámetro. Este parámetro se devuelve según una condición, entonces, si la condición es correcta, se envía un resultado y a veces olvidamos devolver un resultado por default; entonces esto podría causar un bug. Aquí yo voy a probar si este resultado es undefined o no. En caso de que esto sea nulo, me mostrará el error. Aquí puedes ver que el acierto falló, me está indicando que el resultado de la función prueba no debe ser nulo, pero al hacer nulo, recibimos este error. Hay que tomar en cuenta que esta función no detiene la ejecución del código, simplemente lo que hace es mostrar mensajes de error según los aciertos y las validaciones que incluyamos como parámetros en la función. Espero que este método te ayude a probar tus aplicaciones rápidamente.



3. EXTENDIENDO JAVASCRIPT

3.1 Cómo manejar la compatibilidad de JavaScript entre navegadores

Librería: https://github.com/bestiejs/platform.js
Enlace: https://caniuse.com/

Debido a que la web siempre está en constante evolución a veces ciertas tecnologías no están disponibles en ciertos navegadores o sistemas operativos, por lo que si tú no detectas estas diferencias, puede causar malas experiencias al usuario. Te voy a mostrar dos maneras que puedes utilizar para detectar si una tecnología es soportada por el navegador que ha cargado tu aplicación. La primera es a través de la propiedad navigator.userAgent. Esta propiedad devuelve un string bastante largo que puedes ver aquí que incluye toda la información de la computadora, como el sistema operativo, la versión de Chrome y demás. Parsear este string puede ser un poco complicado. Entonces yo te recomiendo que utilices una librería como la que se encuentra en este enlace, platform.js. Esta librería parsea este string y divide los valores en propiedades como puedes ver aquí y así es más fácil de leer y utilizar. Por ejemplo para el sistema operativo, esta devuelve un objeto con la información de cada una de las características de mi sistema operativo. Así con la versión del navegador y demás. Otra técnica que debes implementar es la detección de tecnologías. Por ejemplo aquí yo quiero utilizar el geolocation. A veces sucede que esta API no está disponible en el navegador especialmente en versiones viejas de Internet Explorer o demás. Entonces antes de que tú utilices o llames las funciones de geolocation, es necesario que valides si el navegador lo soporta. Para esto puedes utilizar un simple if. Aquí yo estoy validando si el objeto navigator existe dentro del Windows y si existe también valido si el objeto geolocation está implementado también. A veces pasa por ejemplo si el sitio no está cargado en una URL protegida HTTPS esta tecnología no se soportará y no podrás tener acceso a ella. Ya con esta detección te aseguras de que el código que llames más abajo funcionará y puedes proporcionar una alternativa al usuario en caso de que no sea soportado. Otra cosa que debes tener en cuenta es las versiones de cada navegador que tiene para llamar ciertas API de la web. Por ejemplo, el user media es una clase o un objeto que nos permite tener acceso a la cámara de un teléfono. Puedes ver que por cada versiones del navegador pueden haber nombres diferentes. Estas diferencias han sido corregidas a lo largo del tiempo pero a veces pasa que los usuarios aún utilizan versiones viejas de los navegadores. Entonces cuando tú quieras acceder a la cámara siempre es necesario hacer cierta validación y asegurarnos de que esta librería o esta funcionalidad esté soportada. Ya con esto nosotros podemos solicitarle la cámara al usuario. Otra manera que tú puedes revisar si alguna tecnología es soportada en el navegador es a través de este enlace caniuse.com. Este es un sitio web que está en constante actualización y aquí se indica si alguna tecnología puede ser soportada en ciertas versiones de navegador. Por ejemplo podemos buscar el getUserMedia. Aquí puedes ver todas las versiones de cada uno los navegadores disponibles en el mercado y te dice qué versiones están siendo bien soportadas y cuáles no y de esta manera tú puedes tomar medidas dependiendo del mercado que quieras dirigir tu aplicación.


3.2 Agregando funcionalidad no soportada a travez de polyfills

Libreria Pollyfills: https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills

Tú puedes hacer que tu aplicación web funcione a través de diferentes versiones de navegadores o incluso en navegadores antiguos. Esto es a través de los polyfills. Los polyfills son implementaciones que reemplazan funcionalidades que no están disponibles en el navegador. Por ejemplo este código que ves aquí lo que hace es simular el localStorage en un navegador que no lo soporta. Aquí puedes ver que al inicio hace una validación para ver si el objeto localStorage está en el Windows; en el caso de que no sea así este código crea una simulación del localStorage a través de todos los métodos y propiedades que localStorage soporta, como por ejemplo, setItem, removeItem, key y demás. La idea de los polyfills es que estos deben lucir idénticos a los que implementan los navegadores; de esta manera tú puedes utilizar el mismo código en una versión más avanzada de un navegador o en una más vieja. Aquí puedes ver que al final este objeto customizado se agrega al objeto windows en caso de que localStorage no exista. Ahora puede ser muy complicado implementar un polyfill, por esta razón es que yo te recomiendo que visites este enlace: HTML5 Cross Browser Polyfills. Este enlace contiene una lista larga de polyfills creado por la comunidad de desarrolladores web que han sido probados y utilizados a lo largo de los años. Por ejemplo puedes encontrar para Web Storage, como LocalStorage y SessionStorage; para video en caso de que haya algún problema con alguna funcionalidad en video en una plataforma, audio, bases de datos y demás. En caso de que tú tengas algún problema con alguna tecnología y necesites un polyfill tú puedes dirigirte a este enlace y consultar la librerías disponible.


3.3 Conociendo la librería de utilidades LodashJS

https://lodash.com/

Lodash es una librería de JavaScript que está llena de métodos y utilidades que pueden hacer tu trabajo del día a día más fácil. Para descargar esta librería puedes venir a este enlace: lodash.com. Aquí tienes varias opciones para descargar el JavaScript. Puedes descargar el archivo directamente o puedes implementarlo a través del CDN o, si estás utilizando npm, puedes utilizar este comando para descargarlo. En la documentación encontrarás una larga lista de métodos y utilidades que puedes utilizar. Hay métodos para arreglos, para colecciones de objetos, fechas, funciones y demás. Te quiero mostrar algunos ejemplos de cómo utilizar esta librería. En este ejemplo tengo dos arreglos puedes ver que hay elementos duplicados en ambos. Para llamar los eventos de lodash tienes que utilizar el guión bajo y luego punto y aquí tienes acceso a todas las funciones incluye esta librería. Esta función intersection lo que hace es que busca en ambos arreglos cuáles elementos están en común o tienen en común y luego devuelve un arreglo con el resultado. La función times ejecuta una función un número de veces preestablecido a través de este parámetro y luego devuelve el resultado en un arreglo, como puedes ver aquí. sortedUniq lo que hace es que ordena un arreglo y elimina los duplicados y aquí puedes ver el resultado. isEqual lo que hace es comparar objeto. Por ejemplo aquí tengo dos objetos que tienen las mismas propiedades; si yo comparo ambos objetos aquí voy a obtener un false, pero la función isEqual lo que hace es comparar una propiedad por otra y luego obtenemos un resultado el cual es true. Una función muy sencilla pero que puede ser muy útil es isEmpty. Básicamente lo que hace es que revisa un objeto y valida si este objeto está vacío o no. Otra también que es muy útil es la de cloneDeep. Esta función toma un objeto y lo clona. Digamos, si tienes un objeto muy grande o una estructura de datos muy grande y necesitas crear una copia, simplemente puedes pasarla a través de esta función y obtendrás inmediatamente un clon, como puedes ver aquí. Yo aquí he hecho una copia de este objeto, puedes ver que el original y el clon tienen las mismas propiedades.


3.4 Manipulando datos utilizando LodashJS

Te quiero mostrar una lista de métodos de la librería Lodash que son muy útiles a la hora de trabajar colecciones de datos. Aquí yo tengo un arreglo de objetos donde cada objeto representa el perfil de una persona. En este primer ejemplo yo quiero agrupar estos objetos acorde a la propiedad de género. Para esto yo paso como parámetro la estructura de datos y en el segundo parámetro defino la columna por la cual quiero agrupar. El resultado lo puedes ver aquí. Puedes ver que se ha creado un tipo de diccionario donde el key es el elemento que agrupa el arreglo de los resultados como puedes ver aquí. La función filter lo que hace es filtrar lo datos. Tiene la ventaja que yo puedo definir más de un parámetro para filtrar la información. Por ejemplo yo quiero obtener una lista de personas donde el género femenino, la ciudad es Zoetermeer. Aquí puedes ver el resultado. reduce es muy similar a filter. Aparte de que puede ser usada para filtrar la información nosotros podemos crear una nueva estructura de datos con la información que ha sido filtrada. Por ejemplo aquí yo quiero obtener todos los usuarios que son mayores a 25 y menores a 35 y toda esta información yo solamente quiero retornar el nombre y el apellido. Aquí podemos ver el resultado que solamente he obtenido dos propiedades de estos datos filtrados. orderBy lo que hace es que ordena la información acorde a una de las columnas. En este caso yo quiero ordenar por edad y aquí puedes ver el resultado, siendo la persona más joven Jeanette y la más vieja Giovanni. keysData nos permite definir un key en la estructura de datos que podemos utilizar luego para acceder a la información más fácil. Esto porque debido a que lo datos están en un arreglo solamente tenemos el index para acceder a la información. Pero si nosotros por ejemplo queremos acceder por id o por nombre podemos utilizar esta función. Simplemente pasamos la estructura de datos y definimos la columna que queremos usar como key en el segundo parámetro. Ya con este resultado nosotros podemos acceder más directamente los dato. Por ejemplo aquí yo quiero obtener la persona cuyo id es 3 y aquí puedes ver el resultado.





4. DOCUMENTANDO TU CÓDIGO UTILIZANDO JSDoc

4.1 Introducción a JSDoc

Cuando construimos aplicaciones, uno de los procesos que más pasamos desapercibidos o ignoramos es el de la documentación. La documentación de código es esencial especialmente cuando trabajamos en equipos grandes de desarrolladores para así cada persona saber cuál es el propósito de una función, una variable, un módulo y demás. Para documentar correctamente tu código tú puedes utilizar JSDoc; este es un markup language con etiquetas que te permiten documentar varias partes de tu código y también incluye un compilador que tú puedes utilizar para generar un sitio web con toda tu documentación. Tú puedes ir al sitio oficial de JSDoc a través de esta URL. Aquí encontrarás toda la documentación acerca de esta solución, ejemplos y todos los tags que se incluyen en esta solución.


4.2 Etiquetas comunes de JSDoc

Te voy a mostrar una lista de etiquetas que son comunmente utilizadas cuando documentamos código con JSDoc. Puedes notar que los comentarios de JSDoc empiezan con este formato /** y termina con esta sintaxis */. Visual Studio Code detecta automáticamente cuando yo intento agregar un tipo de estos comentarios y me genera la estructura automáticamente. Cada renglón del comentario siempre lleva un asterisco. Entonces yo aquí puedo poner un comentario y cada vez que aprieto Enter se agregará un asterisco. Esto es muy útil para agregar comentarios rápidamente. Para comentar una variable se recomienda que agregues una descripción del propósito de esta variable y luego utilizando la etiqueta type definas el tipo. JavaScript es un lenguaje dinámicamente tipado y por esta razón es que a veces es difícil saber el tipo de dato de una variable con solo leer el código. Por esta razón, es que es importante siempre definir el tipo de dato de una variable para entender su propósito. Puedes utilizar la etiqueta const para definir que esta variable es una constante, igual que con la variable puedes pasar el tipo de dato y una descripción alternativa. Para describir un objeto o documentar un objeto como el que ves aquí podemos definir un tip con la etiqueta typedef. Aquí nosotros utilizamos esta etiqueta pasamos el tipo de objeto y luego el nombre de este objeto. Luego podemos definir cada una de las propiedades que este objeto tiene con su respectivo tipo, su nombre y una descripción. Y luego podemos agregar una descripción general de este objeto. También podemos definir eventos para así documentar los listeners en nuestra aplicación. Por ejemplo yo aquí estoy definiendo un MouseEvent utilizando la etiqueta typedef. Defino que es un objeto y que se llama MouseEvent. Igual con HTMLElement. Ya que he definido esto entonces yo puedo pasarlo como un tipo de dato a un parámetro, como en este listener. Este listener escucha el clic de un botón y recibe como parámetro un MouseEvent. Entonces yo defino que «e» es un parámetro que recibe un objeto de tipo MouseEvent y luego puedo agregar una descripción. También puedo definir cuál es el propósito de esta función y aquí yo defino que esta función es un listener o que escucha el MouseEvent. Otras etiquetas útiles que puedes utilizar es la de module, la cual define que esta, archivo, es un módulo que se llama constante. También puedes definir el autor de un archivo. Esto es útil por ejemplo si quieres publicar algún módulo o una librería en GitHub o en la internet, entonces puedes poner tu firma a través de esta etiqueta. También el copyright y la versión de la aplicación o módulo en que estés trabajando.


4.3 Documentando funciones en JavaScript con JSDoc

Te quiero mostrar cómo comentar funciones con JSDoc. Cuando tú tienes funciones en tu código tú puedes comentarlas fácilmente si estás trabajando con Visual Studio Code ya que en esta herramienta, cuando tú intentas agregar un comentario JSDoc, VIsual Studio Code detectará esta acción y te generará el formato automáticamente, como puedes ver aquí. Esta función prueba recibe un parámetro num entonces yo aquí con esta estructura simplemente tengo que poner una descripción de la función y luego el tipo de dato que este parámetro es, en este caso es un número, y ya con eso yo he documentado esta función. Las etiquetas que utilizas en este escenario serían: param, por cada parámetro que la función recibe y otro que debes tomar en cuenta es el returns. returns indica cuál es el valor que retorna esta función. En caso de que no retorne nada deberías utilizar returns void entre corchetes. Eso indica que esta función no debe retornar nada y así queda más claro cuál es su función. Aquí tenemos otros ejemplos. Por ejemplo esta función genera un nodo de HTML. Entonces yo lo indico en el returns y pongo el tipo de dato como HTMLDivElement. También es importante agregar un comentario de cuál es el propósito de esta función. En este ejemplo estamos retornando una promesa desde una función. Entonces yo defino los dos parámetros a y b, pongo cuál es el tipo, puedo agregar un comentario extra de cuál es su propósito y en el returns yo indico que esta función retorna una promesa y luego agrego un comentario de cuál es el propósito de esta promesa.


4.4 Documentando clases en JavaScript con JSDoc

Te quiero mostrar cómo comentar clases con JSDoc. Cuando definíamos clases utilizando funciones, era necesario utilizar la etiqueta class para que así quedara claro que el propósito de esta función era definir una clase como en este ejemplo que puedes ver aquí. Entonces tú tenías que poner la etiqueta class y el nombre de la clase, luego una descripción del propósito de esta clase y luego, como cualquier función, se deben describir los parámetros, en este caso es tipo y color, donde ponemos que tipo es string, color el de tipo número y luego una descripción opcional. Ahora que tenemos una definición de clases más clara no es necesario utilizar esta etiqueta ya que queda claro que el propósito de este objeto es ser una clase. Simplemente debemos documentar los elementos que la clase contiene. Aquí yo estoy describiendo la funcionalidad del constructor de esta clase. Entonces se puede agregar una descripción del constructor de qué es lo que hace cuando la instancia se construye y luego utilizando la etiqueta param describimos los parámetros que el constructor recibe, en este caso nombre y apellido que son ambos de tipo string y una descripción opcional. Utilizando la etiqueta private podemos definir que estas propiedades son privadas. A pesar de que en JavaScript no existen realmente propiedades privadas, podemos al menos documentarlo y así dejar en claro que este es el comportamiento que esperamos de esta propiedad. Luego documentamos los métodos como lo haríamos como cualquier otra función. Otra etiqueta útil es readonly. Esto indica que una propiedad o una función como, por ejemplo, esta que tenemos aquí de get, su propósito es de leer datos solamente y también pasamos una descripción alternativa. Y aquí al final, podemos ver un método dentro de esta clase la cual recibe como parámetro una dirección. Como cualquier otra función definimos su propósito y definimos los parámetros utilizando la etiqueta param.


4.5 Cómo exportar documentación con JSDoc

Te voy a enseñar cómo exportar documentación utilizando JSDoc. Para esto es necesario que tengas Node.js instalado en tu computadora; en caso de que no sea así lo puedes descargar desde este enlace. Node.js incluye npm, el cual es una herramienta para la administración de archivos JavaScript que nos permite instalar librerías y herramientas en las aplicaciones web. Habiendo instalado Node el siguiente paso es abrir la aplicación en Visual Studio Code. Tienes que abrir la terminal para correr los comandos que vamos a ejecutar para generar la documentación; en caso de que no puedas encontrar esta ventana, la puedes abrir haciendo clic en esta opción Terminal y seleccionando la opción Nueva Terminal. Dentro de esta ventana inicializamos npm. Aquí npm va a pedir ciertos parámetros, yo los voy a dejar con los valores por defecto. Hecho esto ahora tenemos un archivo package.json. El siguiente paso es instalar JSDoc en la aplicación; para esto hay que correr este comando: npm install guion D mayúscula jsdoc. Ahora vamos a crear un archivo de configuración yo voy a llamar a este archivo jsdoc.json; aquí yo voy a agregar parámetros para que JSDoc sepa cómo yo quiero que genere la documentación. Yo ya tengo ciertos parámetros preestablecidos que los puedes ver aquí. El source indica cómo debe parsear los archivos JavaScript, include indica dónde están, en qué carpeta, includePattern indica que debe parsear todos los archivos con esta extensión, excludePattern indica que debe ignorar todos los archivos dentro de node_modules. En esta opción podemos indicar que haga recursividad de todos los folders dentro de nuestra aplicación en caso de que hubieran más folders dentro de source y destination indica el folder donde se guardará la documentación. El siguiente paso es crear un script dentro del package.json. Para eso tú tienes que venir a package.json y reemplazar esta línea de código aquí con esta que ves en pantalla. Este es el comando que estamos creando y esto es lo que se ejecutará. Puedes ver que pasamos como parámetro el archivo de configuración que acabamos de crear. Y ahora sí podemos generar la documentación. Para eso vamos a correr este comando en la Terminal: npm run doc Aquí puedes ver que se ha creado el nuevo folder doc y luego este es el índice de la documentación. Aquí puedes ver el índice de la documentación que se ha generado; puedes ver que incluye todas las clases que están dentro del código y las funciones por ejemplo la clase Persona incluye todos los comentarios y las descripciones que yo agregué en cada parte de la clase, descripción de los métodos, de los parámetros y también indica el número de línea donde se encuentra cada uno de estos métodos. Con los módulos es igual por cada etiqueta indicando que existía un módulo ha generado una página con los parámetros y las etiquetas que yo he indicado dentro del módulo. Aquí indica los miembros, como las variables y constantes y los métodos. Igual que las funciones declaradas a nivel global como puedes ver aquí el método suma, que incluye la descripción, el return y demás. Esta herramienta es sumamente útil cuando tienes que presentar documentación sobre tu aplicación y te evita tener que escribir largos documentos para poder describir todas las partes de tu aplicación.




5. TRABAJANDO VALORES DE TIEMPO CON MomentJS

5.1 Creando objetos fecha con MomentJS

Librería: https://momentjs.com/

Sucede que cuando tenemos que trabajar con fechas en JavaScript es muy complicado crear funcionalidades o cálculos de tiempo utilizando el objeto Date en JavaScript. Para agilizar estas implementaciones podemos utilizar la librería Moment.js. Esta es una librería que ofrece una larga lista de métodos que nos ayudan a trabajar con valores de tiempo y fechas. Te voy a mostrar cómo crear objetos de fecha y tiempo con esta librería. Yo aquí estoy creando objeto moment a través de vario meto. El objeto moment es el objeto base con el que trabaja esta librería. Para crear un objeto simplemente tenemos que llamar la función moment. Sin parámetros, lo que hará la librería es tomar el tiempo y la fecha actual. Podemos también pasar un string y luego indicarle a Moment cómo debe leer este string y generar el objeto. Tambien puedo utilizar un objeto fecha. Puedo pasar también un timestamp. También es posible clonar un objeto moment utilizando la misma función. Yo aquí creo otro objeto diferente el cual es una copia de la fecha actual. También es posible crear una fecha desde un objeto como puedes ver aquí. Simplemente debes indicar todas las partes de las fechas como atributo del objeto en palabras en inglés. También puedes crear una fecha desde una regla. Aquí yo indico el año, el mes y el día. Utilizando la función format yo puedo darle un formato a una fecha. Esta función me devuelve un string basado en la plantilla que pasa como parámetro en la función. Por ejemplo yo estoy indicando aquí que me muestre el tiempo actual en el formato día, mes y año, hora y minuto. Puedes ver el resultado aquí. Esta plantilla indica que debe mostrar el mes y el día del mes. También podemos agregar texto a las plantillas como puedes ver aquí. «Hoy es el día del año número 52». Para que Moment no parsee este texto debemos ponerlo entre paréntesis cuadrados. Este caso también es muy similar. «El día de la semana es jueves y el del mes 20». Aquí puedes ver que estoy utilizando paréntesis cuadrados para que Moment no intente parsear estos textos. También puedes ver aquí cómo le estoy dando formato al objeto fecha y a la regla.


5.2 Realizando cálculos de tiempo con MomentJS

Te voy a mostrar cómo hacer cálculos de fechas y manipulaciones de datos de tiempo utilizando moment.js. Aquí en este ejemplo tenemos tres objetos Moment. En el primer ejemplo yo quiero saber si un año es anterior al otro. Esto es posible a través de la función isBefore que se llama en base a un objeto Moment. Luego yo paso como parámetro el objeto Moment que quiero comparar. Y aquí puedes ver el resultado. «Es 2010 antes que 2020?» Me devuelve una valor verdadero. En el siguiente ejemplo yo quiero saber si un año es después que el otro. Para esto se utiliza la función isAfter. Entonces, el resultado es: «¿Es 2010 después que 2020?» Falso. Yo puedo calcular si una fecha se encuentra entre dos fechas. Esto se hace a través de la función isBetween. isBetween toma como parámetro una fecha inicial, una fecha final y luego dos parámetros opcionales. El primero es la unidad que yo quiero que haga la comparación de esta fechas y también la manera en que yo quiero que se haga esta comparación. Vamos a hacer un ejemplo. Al correr este código podemos ver que en la línea 29 obtenemos un valor false pero tú puedes ver que la fecha que yo quiero comparar es igual al valor inicial del rango de fecha. Esto es debido a este parámetro. Los paréntesis redondos indican que yo no quiero incluir la fecha inicial y la fecha final en la comparación. Para poder incluir estas fechas yo tengo que utilizar paréntesis cuadrados. Como aquí. Si yo refresco, puedo ver que ahora el valor es true, ya que ahora se toma en consideración ambo. Tú puedes utilizar, por ejemplo, un paréntesis cuadrado a la izquierda y otro redondo a la derecha. Depende de lo que estés calculando. Luego en el valor unidad debes pasar cómo tú quieres que se compare esta fecha. Si lo quieres que se haga a nivel horas, minutos, días, años, meses o demás. Si tú no pasas este parámetro moment hará la comparación a nivel de milisegundos. Luego, para manipular valores de tiempo, puedes utilizar la función substract. Esta función remueve o elimina tiempo de un objeto Moment. En este ejemplo yo estoy indicando que de este objeto Moment quiero eliminar o substraer tres horas y el resultado lo puedes ver aquí. Si vemos este objeto Moment podemos ver que la hora estaba indicada en 15 y ahora está en 2 debido a la función substract. Esta función tú debes pasar el número de unidades que quieres eliminar y el formato de unidades que quieres manejar. En este caso yo quiero eliminar 3 horas. Tú puedes pasar años, minutos, segundos, días y demás. Contrario a la función substract tenemos la función add la cual agrega tiempo. Igual que la función substract esta recibe dos parámetros: el número de unidades que quieres agregar y el tipo de unidad. Aquí yo estoy agregando tres días a este objeto. Y el resultado lo puedes ver aquí. Luego puedes utilizar la función day para saber el día de la semana de un objeto Moment. Esto te puede ser muy útil cuando tienes que hacer cálculo de reportes basados en tiempo. Y la última función que te quiero mostrar es diff. diff devuelve la diferencia entre dos objetos Moment. En este ejemplo yo estoy creando un objeto Moment con la fecha actual y le estoy agregando tres días. Luego con el objeto diff quiero saber cuál es la diferencia entre estos dos objetos pero a nivel de hora. Y el resultado lo puedes ver aquí, son 71 horas.


5.3 Convirtiendo fechas entre zonas horarias con MomentJS

https://momentjs.com/timezone/
Link en wikipedia con las zonas horarias: 
https://en.wikipedia.org/wiki/List_of_tz_database_time_zones


Moment.js incluye una extensión que se utiliza para trabajar con zonas horarias. Esto se llama Moment Timezone. Cuando tú vas al enlace puedes ver que hay varias maneras de descargar esta librería. Para colcolar zonas horarias es necesario tener datos de los años anteriores y a futuros para así tener una referencia de cómo el tiempo se mueve a través del globo. Por esa razón es que tú puedes ver que hay varias versiones con diferentes tamaños depende de cuántos datos tú quieres cargar en tu aplicación. La más grande es esta ya que incluye toda la información disponible de varios años anteriores y a futuro. Y aquí puedes ver que hay diferente rango o puedes cargar una opción que no tiene datos pero entonces tú tendrías que crear tu propio set de información. Esta librería utiliza la nomenclatura de las zonas horarias que puedes ver aquí. Tú puedes acceder a este link de Wikipedia y aquí puedes ver cuál es el formato de las zonas horarias que Moment utiliza. Te voy a mostrar cómo utilizar esta librería a nivel de código. En este ejemplo yo tengo dos objetos moment. Ambos tienen la misma fecha tú puedes ver que yo estoy utilizando una plantilla para parsear ambas fechas. Pero yo estoy definiendo que ambos tienen diferentes zonas horarias. Moment, por defecto, utiliza la zona UTC para parsear y calcular zonas horarias, pero, entonces, cuando nosotros definimos la zona horaria, Moment tomará esta fecha, la parseará como UTC y luego hará la transformación. Notarás que estoy utilizando este formato moment.tz para crear el objeto moment. Esta es la extensión que me ofrece el Moment Timezone. Hecho esto podemos ver el resultado aquí en pantalla. Puedes ver que la hora y la fecha se respetó a la hora de hacer la conversión de zonas horarias. Pero la definición de la zona horaria es diferente. Costa Rica se encuentra a menos seis horas del UTC y Los Ángeles a menos siete. Podemos utilizar esta extensión para transformar fechas de una zona horaria a otra. Por ejemplo yo estoy tomando la hora actual y la estoy tranformando a la zona horaria Asia/Taipei y aquí puedes ver el resultado. En estos momentos son las 9:47 de la mañana y en Taipei son las 4:47. También podemos tomar una fecha arbitraria y transformarla a otra zona horaria. Por ejemplo aquí esta fecha se parseará utilizando la zona horaria UTC y luego se moverá a América/Toronto y aquí puedes ver el resultado. También es posible recobrar la fecha en el formato UTC utilizando esta función, como puedes ver aquí. Esto significa que en la zona horaria UTC son las 8:47 de la mañana y la hora UTC de esta fecha es las 9:55.


5.4 Trabajando con valores locales utilizando MomentJS Local

moment.local('es'); /* en idioma español */
moment.local('es'); /* en idioma francés */

Moment.js incluye una versión que te puede ayudar a mostrar formatos de fecha en lenguajes específicos. Es la que puedes ver aquí: moment-with-locales. Si haces scroll más abajo puedes ver un ejemplo de cómo esto funciona. Aquí tú puedes jugar con este set de botones y ver cómo las fechas cambian según el lenguaje que escojas. En caso que estés trabajando aplicaciones en español o que tal vez estés trabajando con aplicaciones que soportan diferentes lenguajes esto te puede ayudar muchísimo a hacer tu trabajo más rápido. Te voy a mostrar algunos ejemplos. Moment, por defecto, muestra las fechas en inglés, como puedes ver aquí en pantalla, por esa razón necesitamos moment.locale para cambiar el lenguaje. Aquí yo lo estoy cambiando en mi español, luego puedo definirlo en francés, incluso puedes mostrar caracteres como japoneses o chinos con esta librería. Aquí podemos mostrar las fechas en irlandés y también en hebreo. Espero que este tip te ayude a crear aplicaciones multibilingüe más fácilmente.











